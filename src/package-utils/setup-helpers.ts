import fs from 'node:fs'
import { basename, extname, resolve } from 'node:path'
import { addTemplate, addTypeTemplate } from '@nuxt/kit'
import type { Nuxt } from '@nuxt/schema'
import type { UserOptions } from '../module'

export type ComposableSetupOptions = {
  modelsDir: string
  nuxt: Nuxt
  options: {
    dir: string
    options: UserOptions
  }
}

export function setupComposable({ modelsDir, nuxt, options }: ComposableSetupOptions) {
  // 1. add defineSequelizeModel
  const generatedDefineModelPath = addTemplate({
    filename: 'sequelize.define.mjs',
    write: true,
    getContents: async () =>
      [
        'import { pluralize, underscore } from "inflection"',
        '',
        'export function defineSequelizeModel(attributes, options) {',
        '  if (typeof attributes === "function") return attributes',
        '',
        '  return function (name, sequelize) {',
        '    options = {',
        '      tableName: pluralize(underscore(name)),',
        '      ...options,',
        '    }',
        '    return sequelize.define(name, attributes, options)',
        '  }',
        '}',
      ].join('\n'),
  }).dst

  // 2. add defineSequelizeModel type
  addTypeTemplate({
    filename: 'types/sequelize.d.ts',
    getContents: () =>
      [
        '// AUTO-GENERATED BY nuxt-sequelize',
        '',
        'import { Model, ModelAttributes, ModelOptions } from "sequelize"',
        '',
        'declare global {',
        '  export function defineSequelizeModel<T extends ModelAttributes>(attributes: T, options: ModelOptions): (name: string, sequelize: any) => Model<T>',
        '}',
        '',
      ].join('\n'),
  })

  // 3. add model files
  const files = fs.readdirSync(modelsDir)
  const generatedModelPathList: Array<string> = []
  files.forEach((file) => {
    const name = basename(file, extname(file))
    addTemplate({
      filename: `models/${name}.mjs`,
      write: true,
      getContents: () =>
        [
          `import { defineSequelizeModel } from '${generatedDefineModelPath}'`,
          fs.readFileSync(resolve(modelsDir, file), 'utf-8'),
        ].join('\n'),
    })

    generatedModelPathList.push(name)
  })

  // 4. add model imports by #models alias
  nuxt.options.alias['#models'] = addTemplate({
    filename: 'models/index.mjs',
    write: true,
    getContents: () =>
      [
        generatedModelPathList
          .map(name => `import ${name}DefineModel from './${name}.mjs'`)
          .join('\n'),
        '',
        'export const addSequelizeModels = async () => {',
        '  const models = {',
        generatedModelPathList
          .map((name) => {
            return `    ${name}: ${name}DefineModel`
          })
          .join('\n'),
        '  }',
        '',
        '  return models',
        '}',
      ].join('\n'),
  }).dst

  // 5. inject options via virtual template
  nuxt.options.alias['#sequelize'] = addTemplate({
    filename: 'sequelize.mjs',
    write: true,
    getContents: () =>
      Object.entries(options)
        .map(
          ([key, value]) =>
            `export const ${key} = ${JSON.stringify(value, null, 2)}
      `,
        )
        .join('\n'),
  }).dst
}
